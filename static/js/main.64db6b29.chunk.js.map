{"version":3,"sources":["Info.js","AudioVisualiser.js","AudioAnalyser.js","ControlBar.js","spotify.js","Login.js","App.js","registerServiceWorker.js","index.js"],"names":["color","Info","spotify","React","useState","data","setData","colorThief","ColorThief","title","artists","album","art","a","getMyCurrentPlayingTrack","getData","i","length","concat","img","Image","crossOrigin","src","complete","getColor","class","width","height","AudioVisualiser","audioData","createCanvas","createRef","useLayoutEffect","draw","canvas","current","context","getContext","rgb","fillStyle","fillRect","oscilloscope","x","sliceWidth","lineWidth","strokeStyle","beginPath","y","lineTo","stroke","window","innerWidth","innerHeight","ref","AudioAnalyser","stream","Uint8Array","setAudioData","audioContext","useRef","AudioContext","analyser","source","rafId","useEffect","console","log","createAnalyser","fftSize","smoothingTimeConstant","createMediaStreamSource","connect","cancelAnimationFrame","disconnect","requestAnimationFrame","tick","getByteTimeDomainData","ControlBar","controlAudio","onClick","toggleAudio","audio","type","min","max","id","loginUrl","join","Login","className","href","SpotifyWebApi","clientId","clientSecret","redirectUri","App","props","setAudio","token","setToken","getAudio","navigator","mediaDevices","getUserMedia","video","hash","location","substring","split","reduce","initial","item","parts","decodeURIComponent","_token","access_token","setAccessToken","getTracks","forEach","track","stop","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.64db6b29.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport ColorThief from 'colorthief'\n\nvar color = [255, 0, 0];\n\nconst Info = ({ spotify }) => {\n    const [data, setData] = React.useState();\n    const [features, setFeatures] = React.useState();\n    // const [color, setColor] = React.useState();\n    // const [title, setTitle] = React.useState();\n    // const [artists, setArtists] = React.useState();\n    // const [album, setAlbum] = React.useState();\n    // const [art, setArt] = React.useState();\n    // const [track, setTrack] = React.useState();\n    const colorThief = new ColorThief()\n\n\n    var title = '';\n    var artists = '';\n    var album = '';\n    var art = '';\n    var track = '';\n    // var color = '';\n    // var info = spotify.getMyCurrentPlayingTrack().then(\n    //     function (data) {\n    //         return data.json;\n    //     },\n    //     function (err) {\n    //         console.error(err)\n    //     }\n    //   );\n\n    const getData = async () => {\n        const data = await spotify.getMyCurrentPlayingTrack()\n        setData(data)\n    }\n    // console.log(spotify)\n    // useEffect(() => { \n\n    getData()\n    if (data) {\n        // console.log(data)\n        // console.log('test')\n        title = data['item']['name'];\n        // setTitle(title)\n        artists = data['item']['artists'][0]['name']\n        for (var i = 1; i < data['item']['artists'].length; i++) {\n            artists = artists.concat(', ')\n            artists = artists.concat(data['item']['artists'][i]['name'])\n        }\n        // setArtists(artists)\n        album = data['item']['album']['name'];\n        // setAlbum(album)\n        art = data['item']['album']['images'][0]['url'];\n        // setArt(art)\n        track = data['item']['id']\n        // setTrack(track)\n        // const img = resolve(process.cwd(), art);\n        var img = new Image()\n        img.crossOrigin = \"Anonymous\"\n        img.src = art\n\n        if (img.complete) {\n            color = colorThief.getColor(img)\n            // setColor(color)\n        }\n        // .then(color => { console.log(color) })\n        // .catch(err => { console.log(err) })\n    }\n    // console.log(color)\n    // }, [data])\n    // console.log(title)\n    // const getFeatures = async () => {\n    //     const features = await spotify.getAudioFeaturesForTrack(track)\n    //     setFeatures(features)\n    // }\n    // getFeatures()\n    // if (features) {\n    //     var featureList = [\"acousticness\", \"danceability\", \"energy\", \"instrumentalness\", \"key\", \n    //                     \"liveness\", \"loudness\", \"mode\", \"speechiness\", \"tempo\", \"time_signature\", \"valence\"]\n    //     var feat = \"\"\n    //     for (var i = 0; i < featureList.length; i++) {\n    //     feat = feat.concat(featureList[i])\n    //     feat = feat.concat(\": \")\n    //     feat = feat.concat(features[featureList[i]])\n    //     feat = feat.concat(\" \")\n    //     }\n    // }\n\n    // console.log(data)\n    // if (info) {\n    //     title = info['item']['name']\n    // } \n    return (\n        <div class=\"Info\">\n            <img src={art} width=\"450\" height=\"450\"></img>\n            <div>\n                <a>{title}</a><br></br>\n                <a>{artists}</a><br></br>\n                <a>{album}</a><br></br>\n                {/* <a>{feat}</a> */}\n            </div>\n        </div>\n    );\n}\n\nexport { color };\n\nexport default Info","import React, { useEffect, useLayoutEffect } from 'react';\nimport { color } from './Info';\nimport chroma from 'chroma-js'\n\nconst AudioVisualiser = ({ audioData }) => {\n  var createCanvas = React.createRef();\n  var capYPositionArray = [];\n\n  useLayoutEffect(() => {\n    if (audioData.length > 0) {\n      draw();\n    }\n  }, [audioData])\n\n  const draw = () => {\n    // console.log(color)\n    const canvas = createCanvas.current;\n    const height = canvas.height;\n    const width = canvas.width;\n    const context = canvas.getContext('2d');\n\n    var rgb = 'rgb('\n    rgb = rgb.concat(color[0])\n    for (var i = 1; i < 3; i++) {\n      rgb = rgb.concat(\", \")\n      rgb = rgb.concat(color[i])\n    }\n    rgb = rgb.concat(\")\")\n    // console.log(audioData.oAudioData)\n\n    context.fillStyle = 'rgba(0, 0, 0, 1)'\n    context.fillRect(0, 0, width, height)\n\n    oscilloscope(height, width, context, rgb);\n    // spectro(canvas, height, width, context, rgb);\n  }\n\n  const oscilloscope = (height, width, context, rgb) => {\n    let x = 0;\n    const sliceWidth = (width * 1.0) / audioData.length;\n\n    context.lineWidth = 2;\n    context.strokeStyle = rgb;\n\n    context.beginPath();\n    for (const item of audioData) {\n      const y = (item / 255.0) * height / 4;\n      context.lineTo(x, y + height / 3);\n      x += sliceWidth;\n    }\n    context.stroke();\n  }\n\n  const bars = (height, width, context, rgb) => {\n    console.log('x')\n    const capArray = capYPositionArray;\n    var barWidth = 1\n    var barHeight;\n    var xx = 0;\n    var capHeight = 1;\n    var gap = 0\n    var barNum = width / (barWidth + gap)\n    var step = Math.pow(audioData.length, 1 / (barNum));\n    console.log(audioData)\n\n    context.beginPath();\n    for (var i = 0; i < barNum; i++) {\n      context.strokeStyle = rgb;\n      context.lineWidth = 1;\n      //noscale\n      // var value = baudioData[i] * height / 255.0\n\n      //log\n      var value = audioData[Math.round(Math.pow(step, i))] * height / 255;\n\n      // caps\n      context.fillStyle = 'white';\n      if (capArray.length < barNum) {\n        capArray.push(value);\n      };\n      if (value < capArray[i]) {\n        capArray[i] = capArray[i] - 1\n\n        context.fillRect(i * (barWidth + gap) + gap, height - (capArray[i]) / 3, barWidth, capHeight);\n\n        //weirdeffect, line width must be 1\n        // context.lineTo(xx, height - (capYPositionArray[i])/3);\n      } else {\n        context.fillRect(i * (barWidth + gap) + gap, height - (value / 3) - 1, barWidth, capHeight);\n\n        //weirdeffect\n        // context.lineTo(xx, height - value / 3);\n\n        capArray[i] = value;\n      };\n\n      //effect\n      // context.fillStyle = 'rgba(255,20,147,' + (value / 255.0 - 0.75)  + ')'\n\n      //bars\n      context.fillStyle = rgb\n      context.fillRect(i * (barWidth + gap) + gap, height - value / 3, barWidth, value / 3);\n\n      //doublebars\n      // context.fillRect(i * (barWidth+gap)+gap, height / 2 - value/ 6, barWidth, value / 6);\n      // context.fillRect(i * (barWidth+gap)+gap, height / 2, barWidth, value/ 6);\n\n      //line\n      // context.lineTo(xx, height - value / 3);\n      // xx += barWidth + gap\n\n      //gram\n      // context.fillRect(i * (barWidth+gap)+gap, height - 255, barWidth, height);\n    }\n    context.stroke()\n  }\n\n  const spectro = (canvas, height, width, context, rgb) => {\n    var hot = chroma.scale(['#000000', rgb, '#ffffff']).gamma(1);\n    var barWidth = 1\n    var gap = 0\n    var barNum = width / (barWidth + gap)\n\n    context.drawImage(canvas, 0, 0, width, height);\n\n    // iterate over the elements from the array\n    for (var i = 0; i < barNum / 1; i += 1) {\n      // draw each pixel with the specific color\n      var value = audioData[i];\n      // var value = baudioData[Math.round(Math.pow(step, i))] * height / 255 / 3;\n      context.fillStyle = hot(value / 255.0).hex();\n\n      // draw the line at the right side of the canvas\n      context.fillRect(width - 1, height - i, 1, 1);\n    }\n\n    // set translate on the canvas\n    context.translate(-1, 0);\n    // draw the copied image\n    context.drawImage(canvas, 0, 0, width, height, 0, 0, width, height);\n\n    // reset the transformation matrix\n    context.setTransform(1, 0, 0, 1, 0, 0);\n  }\n\n  return (\n    <canvas width={window.innerWidth / 2} height={window.innerHeight /2 } ref={createCanvas} />\n  )\n}\n\nexport default AudioVisualiser;\n","import React, { useEffect, useRef, createRef, useLayoutEffect } from \"react\";\nimport AudioVisualiser from \"./AudioVisualiser\";\n\nconst AudioAnalyser = ({ stream }) => {\n  // const [oAudioData, setOAudioData] = React.useState(new Uint8Array(0));\n  // tick = tick.bind(this);\n  // const [bAudioData, setBAudioData] = React.useState(new Uint8Array(0));\n  const [audioData, setAudioData] = React.useState(new Uint8Array(0));\n\n  var audioContext = useRef(new AudioContext());\n  var analyser = useRef();\n  // var dataArray = useRef();\n  var source = useRef();\n  var rafId = useRef();\n\n  useEffect(() => {\n    if (stream) {\n      console.log(\"init stream\");\n      analyser.current = audioContext.current.createAnalyser();\n      analyser.current.fftSize = 4096;\n      analyser.current.smoothingTimeConstant = 0;\n      // filter = audioContext.createBiquadFilter()\n      // filter.type = \"lowpass\"\n      // filter.frequency.value = 10000;\n      // filter.gain.value = 1;\n      // dataArray.current = new Uint8Array(analyser.current.frequencyBinCount);\n      // setOAudioData(new Uint8Array(analyser.current.fftSize));\n      // setBAudioData(new Uint8Array(analyser.current.fftSize));\n      setAudioData(new Uint8Array(analyser.current.fftSize));\n      source.current = audioContext.current.createMediaStreamSource(stream);\n      source.current.connect(analyser.current);\n      // filter.connect(audioContext.destination)\n      // rafId.current = requestAnimationFrame(tick);\n    } else {\n      console.log(\"no stream\");\n    }\n    return () => {\n      console.log(\"cancel animation\");\n      cancelAnimationFrame(rafId.current);\n      analyser.current.disconnect();\n      source.current.disconnect();\n    };\n  }, [stream]);\n\n  useLayoutEffect(() => {\n    \n    const tick = () => {\n      var audioData = new Uint8Array(analyser.current.fftSize);\n      analyser.current.getByteTimeDomainData(audioData);\n      setAudioData(audioData)\n      // console.log('tick');\n      // var oAudioData = new Uint8Array(analyser.current.fftSize);\n      // var bAudioData = new Uint8Array(analyser.current.fftSize);\n      // analyser.current.getByteTimeDomainData(oAudioData);\n      // analyser.current.getByteFrequencyData(bAudioData);\n      // console.log(dataArray.current)\n      // setOAudioData(oAudioData);\n      // setBAudioData(bAudioData);\n      rafId.current = requestAnimationFrame(tick);\n    };\n    rafId.current = requestAnimationFrame(tick);\n  }, [])\n  return (\n    <div class=\"Vis\">\n      <AudioVisualiser audioData={audioData} />\n    </div>\n  );\n};\n\nexport default AudioAnalyser;\n","import React from 'react';\n\nconst ControlBar = ({ controlAudio }) => {\n  return (\n    <div class=\"ControlBar\">\n      <button onClick={controlAudio.toggleAudio}>\n        {controlAudio.audio ? 'Stop' : 'Begin'}\n      </button>\n      <input type=\"range\" min=\"0\" max=\"100\" class=\"controls\" id=\"opacity\"></input>\n    </div>\n  );\n}\n\nexport default ControlBar","\nexport const authEndpoint = \"https://accounts.spotify.com/authorize\";\nconst redirectUri = \"http://localhost:3000/callback/\";\nconst clientId = \"6d21bc23eaeb4573a2b668d8239e57ea\";\n\nconst scopes = [\n  \"user-read-currently-playing\",\n  \"user-read-recently-played\",\n  \"user-read-playback-state\",\n  \"user-top-read\",\n  \"user-modify-playback-state\",\n];\n\nexport const getTokenFromUrl = () => {\n  return window.location.hash\n    .substring(1)\n    .split(\"&\")\n    .reduce((initial, item) => {\n      let parts = item.split(\"=\");\n      initial[parts[0]] = decodeURIComponent(parts[1]);\n      return initial;\n    }, {});\n};\n\n\nexport const loginUrl = `${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\n  \"%20\")}&response_type=token&show_dialog=true`;","import React from \"react\";\nimport { loginUrl } from './spotify'\n\nconst Login = () => {\n  return (\n    <div className=\"login\">\n      <a href={loginUrl}>login</a>\n    </div>\n  );\n}\n\nexport default Login;","import React, { useEffect } from 'react';\nimport AudioAnalyser from './AudioAnalyser';\nimport ControlBar from './ControlBar';\nimport { getTokenFromUrl } from './spotify';\nimport Login from './Login';\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport Info from './Info';\nimport './App.css';\n\nconst spotify = new SpotifyWebApi({\n  clientId: '6d21bc23eaeb4573a2b668d8239e57ea',\n  clientSecret: 'e5dffd480c28448b85c9633cfc868f9e',\n  redirectUri: 'http://localhost:3000/callback/'\n});\n\nconst App = (props) => {\n  const [audio, setAudio] = React.useState(null);\n  const [color, setColor] = React.useState(null);\n  const [token, setToken] = React.useState();\n\n  const getAudio = async () => {\n    const audio = await navigator.mediaDevices.getUserMedia({\n      audio: true,\n      video: false\n    });\n    setAudio(audio);\n  }\n\n  const stopAudio = () => {\n    audio.getTracks().forEach(track => track.stop());\n    setAudio(null);\n  }\n\n  const toggleAudio = () => {\n    if (audio) {\n      stopAudio();\n    } else {\n      getAudio();\n    }\n  }\n\n  useEffect(() => {\n    const hash = getTokenFromUrl();\n    window.location.hash = \"\";\n    const _token = hash.access_token;\n    if (_token) {\n      setToken(_token);\n      spotify.setAccessToken(_token);\n    }\n  }, [])\n\n  return (\n    <div className=\"App\">\n      {token ? <a>LOGGED IN</a> : <Login />}\n      <Info spotify={spotify} />\n      <ControlBar controlAudio={{ audio, toggleAudio }} />\n      {audio ? <AudioAnalyser stream={audio} /> : ''}\n    </div>\n  );\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}