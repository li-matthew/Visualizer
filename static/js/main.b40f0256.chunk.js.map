{"version":3,"sources":["ControlBar.js","AudioVisualiser.js","AudioAnalyser.js","Header.js","App.js","spotify.js","registerServiceWorker.js","index.js"],"names":["thickness","fade","color","ControlBar","class","ButtonGroup","Button","id","active","Typography","gutterBottom","Slider","min","max","step","defaultValue","valueLabelDisplay","onChange","event","value","AudioVisualiser","audioData","createCanvas","React","createRef","useRef","useLayoutEffect","length","draw","console","log","canvas","current","height","width","context","getContext","rgb","concat","i","fillStyle","fillRect","oscilloscope","x","sliceWidth","lineWidth","strokeStyle","beginPath","y","lineTo","stroke","window","innerWidth","innerHeight","ref","AudioAnalyser","stream","useState","Uint8Array","setAudioData","audioContext","AudioContext","analyser","source","rafId","useEffect","createAnalyser","fftSize","smoothingTimeConstant","createMediaStreamSource","connect","cancelAnimationFrame","disconnect","requestAnimationFrame","tick","getByteTimeDomainData","Header","controlAudio","variant","onClick","toggleAudio","audio","App","join","props","setAudio","getAudio","a","navigator","mediaDevices","getUserMedia","video","className","getTracks","forEach","track","stop","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.b40f0256.chunk.js","sourcesContent":["import React from 'react';\nimport { Slider, Typography, ButtonGroup, Button } from '@material-ui/core'\n\nvar thickness = 1;\nvar fade = 0;\nvar color = [20, 255, 235];\n\nconst ControlBar = () => {\n  // const [thickness, setThickness] = React.useState();\n  const reset = () => {\n\n  }\n\n  return (\n    <div class='ControlBar'>\n      <ButtonGroup color=\"secondary\">\n        <Button id='butt' active='true'>oscilloscope</Button>\n        <Button id='butt'>bars</Button>\n        <Button id='butt'>spectrogram</Button>\n      </ButtonGroup>\n      <Typography class=\"controlTitle\" gutterBottom color='inherit'>thickness</Typography>\n      <Slider id='thickness'\n        min={0}\n        max={10}\n        step={0.01}\n        defaultValue={1}\n        valueLabelDisplay='auto'\n        color='secondary'\n        onChange={(event, value) => {\n          thickness = value;\n        }}\n      />\n      <Typography class=\"controlTitle\" gutterBottom color='inherit'>fade</Typography>\n      <Slider id='fade'\n        min={0}\n        max={1}\n        step={0.01}\n        defaultValue={0}\n        valueLabelDisplay='auto'\n        color='secondary'\n        onChange={(event, value) => {\n          fade = value;\n        }}\n      />\n      <Typography class=\"controlTitle\" gutterBottom color='inherit'>color</Typography>\n      <div class='color'>\n        <Slider id='red'\n          min={0}\n          max={255}\n          step={1}\n          defaultValue={20}\n          valueLabelDisplay='auto'\n          color='secondary'\n          onChange={(event, value) => {\n            color[0] = value;\n          }}\n        />\n        <Slider id='green'\n          min={0}\n          max={255}\n          step={1}\n          defaultValue={255}\n          valueLabelDisplay='auto'\n          color='secondary'\n          onChange={(event, value) => {\n            color[1] = value;\n          }}\n        />\n        <Slider id='blue'\n          min={0}\n          max={255}\n          step={1}\n          defaultValue={235}\n          valueLabelDisplay='auto'\n          color='secondary'\n          onChange={(event, value) => {\n            color[2] = value;\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport { thickness, fade, color };\n\nexport default ControlBar","import React, { useEffect, useLayoutEffect, useRef } from 'react';\n// import { color } from './Info';\nimport chroma from 'chroma-js'\nimport { thickness, fade, color } from './ControlBar'\n\nconst AudioVisualiser = ({ audioData }) => {\n  var createCanvas = React.createRef();\n  var capYPositionArray = useRef([]);\n\n  useLayoutEffect(() => {\n    if (audioData.length > 0) {\n      draw();\n      console.log(thickness)\n    }\n  }, [audioData])\n\n  const draw = () => {\n    // console.log(color)\n    const canvas = createCanvas.current;\n    const height = canvas.height;\n    const width = canvas.width;\n    const context = canvas.getContext('2d');\n\n    var rgb = 'rgb('\n    rgb = rgb.concat(color[0])\n    for (var i = 1; i < 3; i++) {\n      rgb = rgb.concat(\", \")\n      rgb = rgb.concat(color[i])\n    }\n    rgb = rgb.concat(\")\")\n    // console.log(audioData.oAudioData)\n\n    context.fillStyle = 'rgba(0, 0, 0, ' + (1 - fade) + ')'\n    context.fillRect(0, 0, width, height)\n\n    oscilloscope(height, width, context, rgb, thickness);\n    // spectro(canvas, height, width, context, rgb);\n    // bars(height, width, context, rgb);\n  }\n\n  const oscilloscope = (height, width, context, rgb, thickness) => {\n    let x = 0;\n    const sliceWidth = (width * 1.0) / audioData.length;\n\n    context.lineWidth = thickness;\n    context.strokeStyle = rgb;\n    // var hot = chroma.scale(['#000000', 'red', '#ffffff']).gamma(1);\n    context.beginPath();\n    for (const item of audioData) {\n      // context.strokeStyle = hot(item).hex();\n      const y = (item / 255.0) * height / 4;\n      context.lineTo(x, y + height / 3);\n      x += sliceWidth;\n    }\n    context.stroke();\n  }\n\n  const bars = (height, width, context, rgb) => {\n    const capArray = capYPositionArray.current;\n    var barWidth = 1\n    var barHeight;\n    var xx = 0;\n    var capHeight = 1;\n    var gap = 0\n    var barNum = width / (barWidth + gap)\n    var step = Math.pow(audioData.length, 1 / (barNum));\n    // console.log(audioData)\n\n    context.beginPath();\n    for (var i = 0; i < barNum; i++) {\n      context.strokeStyle = rgb;\n      context.lineWidth = 1;\n\n      //noscale\n      // var value = baudioData[i] * height / 255.0\n\n      //log\n      var value = audioData[Math.round(Math.pow(step, i))] * height / 255;\n\n      // caps\n      context.fillStyle = 'white';\n      if (capArray.length < barNum) {\n        capArray.push(value);\n      };\n      if (value < capArray[i]) {\n        capArray[i] = capArray[i] - 1\n        // context.fillRect(i * (barWidth + gap) + gap, height - (capArray[i] / 3), barWidth, capHeight);\n        //weirdeffect, line width must be 1\n        context.lineTo(xx, height - (capArray[i])/3);\n      } else {\n        // context.fillRect(i * (barWidth + gap) + gap, height - (value / 3) - 1, barWidth, capHeight);\n\n        //weirdeffect\n        context.lineTo(xx, height - value / 3);\n\n        capArray[i] = value;\n      };\n\n      //effect\n      // context.fillStyle = 'rgba(255,20,147,' + (value / 255.0 - 0.75)  + ')'\n\n      //bars\n      // context.fillStyle = rgb\n      // context.fillRect(i * (barWidth + gap) + gap, height - value / 3, barWidth, value / 3);\n\n      //doublebars\n      // context.fillRect(i * (barWidth+gap)+gap, height / 2 - value/ 6, barWidth, value / 6);\n      // context.fillRect(i * (barWidth+gap)+gap, height / 2, barWidth, value/ 6);\n\n      //line\n      context.lineTo(xx, height - value / 3);\n      xx += barWidth + gap\n\n      //gram\n      // context.fillRect(i * (barWidth+gap)+gap, height - 255, barWidth, height);\n    }\n    context.stroke()\n  }\n\n  const spectro = (canvas, height, width, context, rgb) => {\n    var hot = chroma.scale(['#000000', rgb, '#ffffff']).gamma(1);\n    var barWidth = 1\n    var gap = 0\n    var barNum = width / (barWidth + gap)\n\n    context.drawImage(canvas, 0, 0, width, height);\n\n    // iterate over the elements from the array\n    for (var i = 0; i < barNum / 1; i += 1) {\n      // draw each pixel with the specific color\n      var value = audioData[i];\n      // var value = baudioData[Math.round(Math.pow(step, i))] * height / 255 / 3;\n      context.fillStyle = hot(value / 255.0).hex();\n\n      // draw the line at the right side of the canvas\n      context.fillRect(width - 1, height - i, 1, 1);\n    }\n\n    // set translate on the canvas\n    context.translate(-1, 0);\n    // draw the copied image\n    context.drawImage(canvas, 0, 0, width, height, 0, 0, width, height);\n\n    // reset the transformation matrix\n    context.setTransform(1, 0, 0, 1, 0, 0);\n  }\n\n  return (\n    <canvas width={window.innerWidth / 2} height={window.innerHeight / 2} ref={createCanvas} />\n  )\n}\n\nexport default AudioVisualiser;\n","import React, { useEffect, useRef, createRef, useLayoutEffect } from \"react\";\nimport AudioVisualiser from \"./AudioVisualiser\";\n\nconst AudioAnalyser = ({ stream }) => {\n  // const [oAudioData, setOAudioData] = React.useState(new Uint8Array(0));\n  // tick = tick.bind(this);\n  // const [bAudioData, setBAudioData] = React.useState(new Uint8Array(0));\n  const [audioData, setAudioData] = React.useState(new Uint8Array(0));\n\n  var audioContext = useRef(new AudioContext());\n  var analyser = useRef();\n  // var dataArray = useRef();\n  var source = useRef();\n  var rafId = useRef();\n\n  useEffect(() => {\n    if (stream) {\n      console.log(\"init stream\");\n      analyser.current = audioContext.current.createAnalyser();\n      analyser.current.fftSize = 4096;\n      analyser.current.smoothingTimeConstant = 0.9;\n      // filter = audioContext.createBiquadFilter()\n      // filter.type = \"lowpass\"\n      // filter.frequency.value = 10000;\n      // filter.gain.value = 1;\n      // dataArray.current = new Uint8Array(analyser.current.frequencyBinCount);\n      // setOAudioData(new Uint8Array(analyser.current.fftSize));\n      // setBAudioData(new Uint8Array(analyser.current.fftSize));\n      setAudioData(new Uint8Array(analyser.current.fftSize));\n      source.current = audioContext.current.createMediaStreamSource(stream);\n      source.current.connect(analyser.current);\n      // filter.connect(audioContext.destination)\n      // rafId.current = requestAnimationFrame(tick);\n    } else {\n      console.log(\"no stream\");\n    }\n    return () => {\n      console.log(\"cancel animation\");\n      cancelAnimationFrame(rafId.current);\n      analyser.current.disconnect();\n      source.current.disconnect();\n    };\n  }, [stream]);\n\n  useLayoutEffect(() => {\n\n    const tick = () => {\n        var audioData = new Uint8Array(analyser.current.fftSize);\n        analyser.current.getByteTimeDomainData(audioData);\n        // analyser.current.getByteFrequencyData(audioData);\n        setAudioData(audioData)\n        // console.log('tick');\n        // var oAudioData = new Uint8Array(analyser.current.fftSize);\n        // var bAudioData = new Uint8Array(analyser.current.fftSize);\n        // analyser.current.getByteTimeDomainData(oAudioData);\n        // analyser.current.getByteFrequencyData(bAudioData);\n        // console.log(dataArray.current)\n        // setOAudioData(oAudioData);\n        // setBAudioData(bAudioData);\n        rafId.current = requestAnimationFrame(tick);\n    };\n    rafId.current = requestAnimationFrame(tick);\n  }, [])\n  return (\n    <div class=\"Vis\">\n      <AudioVisualiser audioData={audioData} />\n    </div>\n  );\n};\n\nexport default AudioAnalyser;\n","import React from 'react';\nimport { Button } from '@material-ui/core'\n\nconst Header = ({ controlAudio }) => {\n    return (\n        <div class=\"Header\">\n            <Button id='butt' variant='outlined' color='secondary' onClick={controlAudio.toggleAudio}>\n                {controlAudio.audio ? 'stop' : 'begin'}\n            </Button>\n        </div>\n    );\n}\n\nexport default Header","import React, { useEffect } from 'react';\nimport AudioAnalyser from './AudioAnalyser';\nimport Header from './Header';\nimport ControlBar from './ControlBar'\nimport { getTokenFromUrl } from './spotify';\nimport { Typography } from '@material-ui/core'\nimport Login from './Login';\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport Info from './Info';\nimport './App.css';\n\n// const spotify = new SpotifyWebApi({\n//   clientId: '6d21bc23eaeb4573a2b668d8239e57ea',\n//   redirectUri: 'http://localhost:3000/callback/'\n// });\n\nconst App = (props) => {\n  const [audio, setAudio] = React.useState(null);\n  // const [token, setToken] = React.useState();\n\n  const getAudio = async () => {\n    const audio = await navigator.mediaDevices.getUserMedia({\n      audio: true,\n      video: false\n    });\n    setAudio(audio);\n  }\n\n  const stopAudio = () => {\n    audio.getTracks().forEach(track => track.stop());\n    setAudio(null);\n  }\n\n  const toggleAudio = () => {\n    if (audio) {\n      stopAudio();\n    } else {\n      getAudio();\n    }\n  }\n\n  // useEffect(() => {\n  //   const hash = getTokenFromUrl();\n  //   window.location.hash = \"\";\n  //   const _token = hash.access_token;\n  //   if (_token) {\n  //     setToken(_token);\n  //     spotify.setAccessToken(_token);\n  //   }\n  // }, [])\n\n  return (\n    <div className=\"App\">\n    <Typography class='title' variant='h1'>sandwich time</Typography>\n      {/* {token ? <a>LOGGED IN</a> : <Login />}\n      <Info spotify={spotify} /> */}\n      <Header controlAudio={{ audio, toggleAudio }} />\n      {audio ? <AudioAnalyser stream={audio} /> : ''}\n      <ControlBar />\n    </div>\n  );\n}\n\nexport default App;\n","\nexport const authEndpoint = \"https://accounts.spotify.com/authorize\";\nconst redirectUri = \"http://localhost:3000/callback/\";\nconst clientId = \"6d21bc23eaeb4573a2b668d8239e57ea\";\n\nconst scopes = [\n  \"user-read-currently-playing\",\n  \"user-read-recently-played\",\n  \"user-read-playback-state\",\n  \"user-top-read\",\n  \"user-modify-playback-state\",\n];\n\nexport const getTokenFromUrl = () => {\n  return window.location.hash\n    .substring(1)\n    .split(\"&\")\n    .reduce((initial, item) => {\n      let parts = item.split(\"=\");\n      initial[parts[0]] = decodeURIComponent(parts[1]);\n      return initial;\n    }, {});\n};\n\n\nexport const loginUrl = `${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\n  \"%20\")}&response_type=token&show_dialog=true`;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}